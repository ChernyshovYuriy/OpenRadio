apply plugin: 'com.android.application'
apply plugin: 'io.fabric'

android {
    compileSdkVersion 26
    buildToolsVersion "26.0.1"

    def versionPropsFile = file('version.properties')
    def code = 1
    if (versionPropsFile.canRead()) {
        def Properties versionProps = new Properties()
        versionProps.load(new FileInputStream(versionPropsFile))
        code = versionProps['VERSION_CODE'].toInteger()
    } else {
        throw new GradleException("Could not read version.properties !")
    }
    println "Version code:" + code

    def signConfFile = file("sign.properties")
    def storeFileProp
    def aliasProp
    def pwdProp
    if (signConfFile.canRead()) {
        def Properties signProps = new Properties()
        signProps.load(new FileInputStream(signConfFile))
        storeFileProp = signProps['file'].toString()
        aliasProp = signProps['alias'].toString()
        pwdProp = signProps['pwd'].toString()
    } else {
        throw new GradleException("Could not read sign.properties !")
    }

    signingConfigs {
        config {
            keyAlias aliasProp
            keyPassword pwdProp
            storeFile file(storeFileProp)
            storePassword pwdProp
        }
    }

    defaultConfig {
        applicationId "com.yuriy.openradio"
        minSdkVersion 16
        targetSdkVersion 26
        versionCode code
        versionName "3.0"

        jackOptions {
            enabled true
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    buildTypes {
//        release {
//            minifyEnabled true
//            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
//        }
        debug {
            signingConfig signingConfigs.config
        }
        release {
            signingConfig signingConfigs.config
        }
    }
    lintOptions {
        abortOnError false
    }
    testOptions {
        unitTests.returnDefaultValues = true
    }
}

dependencies {
    compile "com.android.support:appcompat-v7:$supportVersion"
    compile "com.android.support:support-v4:$supportVersion"
    compile "com.android.support:design:$supportVersion"
    compile('com.crashlytics.sdk.android:crashlytics:2.6.8@aar') {
        transitive = true;
    }
    compile 'com.google.android.gms:play-services-drive:11.0.4'
    compile 'com.android.support.constraint:constraint-layout:1.0.2'
    compile 'log4j:log4j:1.2.17'

    androidTestCompile('com.google.dexmaker:dexmaker-mockito:1.2') {
        exclude group: 'org.hamcrest'
    }
    androidTestCompile 'org.hamcrest:hamcrest-all:1.3'

    testCompile 'org.hamcrest:hamcrest-all:1.3'
    testCompile "junit:junit:4.12"
    // https://mvnrepository.com/artifact/org.json/json
    testCompile group: 'org.json', name: 'json', version: '20170516'
}

tasks.whenTaskAdded { task ->
    if (task.name.equals("assembleRelease")) {
        task.doLast() {
            tasks.getAndIncrementVersionCode.execute()
        }
    }
}

task getAndIncrementVersionCode << {

    println "Get And Increment Version code"

    def versionPropsFile = file('version.properties')
    if (versionPropsFile.canRead()) {
        def Properties versionProps = new Properties()
        versionProps.load(new FileInputStream(versionPropsFile))
        def code = versionProps['VERSION_CODE'].toInteger() + 1
        versionProps['VERSION_CODE'] = code.toString()
        versionProps.store(versionPropsFile.newWriter(), null)

        println "Version code incremented to " + code
    } else {
        throw new GradleException("Could not read version.properties !")
    }
}
