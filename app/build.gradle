buildscript {
    repositories {
        maven { url 'https://maven.fabric.io/public' }
    }

    dependencies {
        classpath 'io.fabric.tools:gradle:1.+'
    }
}
apply plugin: 'com.android.application'
apply plugin: 'io.fabric'

repositories {
    maven { url 'https://maven.fabric.io/public' }
}


android {

    compileSdkVersion 23
    buildToolsVersion "23.0.2"

    def versionPropsFile = file('version.properties')
    def code = 1
    if (versionPropsFile.canRead()) {
        def Properties versionProps = new Properties()
        versionProps.load(new FileInputStream(versionPropsFile))
        code = versionProps['VERSION_CODE'].toInteger()
    } else {
        throw new GradleException("Could not read version.properties !")
    }

    println "Version code:" + code

    defaultConfig {
        applicationId "com.yuriy.openradio"
        minSdkVersion 21
        targetSdkVersion 23
        versionCode code
        versionName "2.1"
    }

    buildTypes {

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        assembleRelease {
            doLast {
                // Post release actions, prepare variables for the next release
                tasks.getAndIncrementVersionCode.execute()
            }
        }

        /*
        applicationVariants.all { variant ->
            def f = variant.outputFile
            def fname = f.name.replace(".apk",
                    "-${defaultConfig.versionName}.apk")
            variant.outputFile = new File(f.parent, fname)
        }
        */
    }

    lintOptions {
        abortOnError false
    }
}

dependencies {
    compile 'commons-io:commons-io:2.4'
    compile 'com.android.support:appcompat-v7:23.1.1'
    compile 'com.android.support:design:23.1.1'
    compile('com.crashlytics.sdk.android:crashlytics:2.2.0@aar') {
        transitive = true;
    }
    compile 'com.github.wseemann:FFmpegMediaMetadataRetriever:1.0.2'

    androidTestCompile('com.google.dexmaker:dexmaker-mockito:1.2') {
        exclude group: 'org.hamcrest'
    }
    androidTestCompile 'org.hamcrest:hamcrest-all:1.3'
}

tasks.whenTaskAdded { task ->
    //println "TASK:" + task.name
    if (task.name.equals("assembleRelease")) {
        println "Add Assemble Release Task. Prepare vars for next release ..."
        task.dependsOn getAndIncrementVersionCode
    }
}

task getAndIncrementVersionCode << {

    println "Get And Increment Version code"

    def versionPropsFile = file('version.properties')
    if (versionPropsFile.canRead()) {
        def Properties versionProps = new Properties()
        versionProps.load(new FileInputStream(versionPropsFile))
        def code = versionProps['VERSION_CODE'].toInteger() + 1
        versionProps['VERSION_CODE'] = code.toString()
        versionProps.store(versionPropsFile.newWriter(), null)

        println "Version code incremented to " + code
    } else {
        throw new GradleException("Could not read version.properties !")
    }
}
